function [time_slots,open_seats] = class_times(isM, isT, isW, isR, isF, times)
    % open_seats = number of open seat for each class conflicting with the proposed class
    % time_slots = course name of each class conflicting with the proposed class
    % This function determines the number of open seats available at a user-specified time slot (read in from the vector times) 
    % The classes returned in the time_slots vector must conflict with at least one proposed class day 
    % (e.g. a friday only class WOULD still conflict with a proposed Monday-Wednesday-Friday class

    % reads start time of each class offered and converts to a row vector of strings
    [num,start_times] = xlsread('CSCD.xlsx', "K2:K2177"); %reads the start times for each class (found in column K), stored as text
    start_times = string(start_times); %convert start_times to strings
    start_times = start_times.'; %transpose vector
   
    % Initialize vectors and index
    time_slots = strings(1,250);
    open_seats = zeros(1,250);
    index = 1;
    
    % reads days of the week each class is offered and converts to a row vector of strings
    [num,days_of_week] = xlsread('CSCD.xlsx', "I2:I2177");
    days_of_week = string(days_of_week);
    days_of_week.';
    
    % reads name of each class offered and converts to a row vector of strings
    [num, class_name] = xlsread('CSCD.xlsx', "B2:B2177");
    class_name = string(class_name);
    class_name = class_name.';
    
    % reads number of students enrolled in each class offered and converts to a row vector of strings
    [num] = xlsread('CSCD.xlsx', "V2:V2177");
    enrolled = num;
    enrolled = enrolled.';
    
    % reads the course capacity and converts to a row vector of strings
    [num] = xlsread('CSCD.xlsx', "W2:W2177");
    cap = num;
    cap = cap.';
   
    % find course conflicts for each proposed time (stored in the input vector times)
    for jj = 1:length(times)
        classes = strings(1,250);
        seats = zeros(1,250);
        indeces = zeros(1, 250);
        for ii = 1:length(start_times)
            st= strtok(start_times(ii), ':');
            t = strtok(times(jj), ':');
            
            % Compare start time of proposed class with start time of classes in CSCD
            if st == t 
                indeces(1,index) = ii;
                index = index+ 1;
            end
        end
        index = 1;
        isDay = false;
        
        % find day conflicts 
        for ii = 1: length(indeces)
            if indeces(ii) > 0
                
                % Determine what day of the week courses are offered
                % IF a class is offered on that day of the week THEN isDay (a boolean) is set high
                if strfind(days_of_week(indeces(ii)), isM) > 0
                    isDay = true;
                end

                if strfind(days_of_week(indeces(ii)), isT) > 0
                    isDay = true;
                end

                if strfind(days_of_week(indeces(ii)), isW) > 0
                    isDay = true;
                end

                if strfind(days_of_week(indeces(ii)), isR) > 0
                    isDay = true;
                end

                if strfind(days_of_week(indeces(ii)), isF) > 0
                    isDay = true;
                end
                % end of condition to determine day of week conflict
                if (isDay)
                    classes(index) = class_name(indeces(ii));
                    seats(index) = cap(indeces(ii)) - enrolled(indeces(ii));
                    index = index + 1;
                    isDay = false;
                end % end IF isDay = true

            end % end IF indices > 0
        end % end find day conflicts
        
        % Append filled vectors "classes" and "seats" to pre-allocated vectors "time_slots" and "open_seats"
        time_slots = [time_slots; classes];
        open_seats = [open_seats; seats];
    end % end find time conflicts
    
    % Clear the first row (consists only of empty strings)
    time_slots(1,:) = [];
    open_seats(1,:) = [];


end % end function
